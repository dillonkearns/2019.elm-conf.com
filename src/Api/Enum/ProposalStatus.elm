-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ProposalStatus exposing (ProposalStatus(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type ProposalStatus
    = Draft
    | Published


list : List ProposalStatus
list =
    [ Draft, Published ]


decoder : Decoder ProposalStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DRAFT" ->
                        Decode.succeed Draft

                    "PUBLISHED" ->
                        Decode.succeed Published

                    _ ->
                        Decode.fail ("Invalid ProposalStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ProposalStatus -> String
toString enum =
    case enum of
        Draft ->
            "DRAFT"

        Published ->
            "PUBLISHED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProposalStatus
fromString enumString =
    case enumString of
        "DRAFT" ->
            Just Draft

        "PUBLISHED" ->
            Just Published

        _ ->
            Nothing
