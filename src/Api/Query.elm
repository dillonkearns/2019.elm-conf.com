-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (NodeRequiredArguments, ProposalByNodeIdRequiredArguments, ProposalRequiredArguments, ProposalsOptionalArguments, UserByNodeIdRequiredArguments, UserRequiredArguments, UsersOptionalArguments, node, nodeId, proposal, proposalByNodeId, proposals, query, user, userByNodeId, users)

import Api.Enum.ProposalsOrderBy
import Api.Enum.UsersOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.
-}
query : SelectionSet decodesTo RootQuery -> SelectionSet decodesTo RootQuery
query object_ =
    Object.selectionForCompositeField "query" [] object_ identity


{-| The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
-}
nodeId : SelectionSet Api.ScalarCodecs.Id RootQuery
nodeId =
    Object.selectionForField "ScalarCodecs.Id" "nodeId" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias NodeRequiredArguments =
    { nodeId : Api.ScalarCodecs.Id }


{-| Fetches an object given its globally unique `ID`.

  - nodeId - The globally unique `ID`.

-}
node : NodeRequiredArguments -> SelectionSet decodesTo Api.Interface.Node -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionForCompositeField "node" [ Argument.required "nodeId" requiredArgs.nodeId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ProposalsOptionalArguments =
    { first : OptionalArgument Int
    , offset : OptionalArgument Int
    , orderBy : OptionalArgument (List Api.Enum.ProposalsOrderBy.ProposalsOrderBy)
    , condition : OptionalArgument Api.InputObject.ProposalCondition
    }


{-| Reads a set of `Proposal`.

  - first - Only read the first `n` values of the set.
  - offset - Skip the first `n` values.
  - orderBy - The method to use when ordering `Proposal`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
proposals : (ProposalsOptionalArguments -> ProposalsOptionalArguments) -> SelectionSet decodesTo Api.Object.Proposal -> SelectionSet (Maybe (List decodesTo)) RootQuery
proposals fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, offset = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.ProposalsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Api.InputObject.encodeProposalCondition ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "proposals" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias UsersOptionalArguments =
    { first : OptionalArgument Int
    , offset : OptionalArgument Int
    , orderBy : OptionalArgument (List Api.Enum.UsersOrderBy.UsersOrderBy)
    , condition : OptionalArgument Api.InputObject.UserCondition
    }


{-| Reads a set of `User`.

  - first - Only read the first `n` values of the set.
  - offset - Skip the first `n` values.
  - orderBy - The method to use when ordering `User`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
users : (UsersOptionalArguments -> UsersOptionalArguments) -> SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe (List decodesTo)) RootQuery
users fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, offset = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.UsersOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Api.InputObject.encodeUserCondition ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "users" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias ProposalRequiredArguments =
    { id : Int }


proposal : ProposalRequiredArguments -> SelectionSet decodesTo Api.Object.Proposal -> SelectionSet (Maybe decodesTo) RootQuery
proposal requiredArgs object_ =
    Object.selectionForCompositeField "proposal" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)


type alias UserRequiredArguments =
    { id : Int }


user : UserRequiredArguments -> SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)


type alias ProposalByNodeIdRequiredArguments =
    { nodeId : Api.ScalarCodecs.Id }


{-| Reads a single `Proposal` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `Proposal`.

-}
proposalByNodeId : ProposalByNodeIdRequiredArguments -> SelectionSet decodesTo Api.Object.Proposal -> SelectionSet (Maybe decodesTo) RootQuery
proposalByNodeId requiredArgs object_ =
    Object.selectionForCompositeField "proposalByNodeId" [ Argument.required "nodeId" requiredArgs.nodeId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias UserByNodeIdRequiredArguments =
    { nodeId : Api.ScalarCodecs.Id }


{-| Reads a single `User` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `User`.

-}
userByNodeId : UserByNodeIdRequiredArguments -> SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
userByNodeId requiredArgs object_ =
    Object.selectionForCompositeField "userByNodeId" [ Argument.required "nodeId" requiredArgs.nodeId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
